###############################################################################
# Configuration file for ZSH
# Copyright (c) 2023 Manuel Schlund <schlunma@gmail.com>
# Licensed under the GNU General Public License v3.0 (or later).
###############################################################################



###############################################################################
# Do not load this file for non-interactive shells
###############################################################################
[[ $- == *i* ]] || return
###############################################################################



###############################################################################
# Check if session is SSH session and start gpg-agent if necessary
###############################################################################
if (( ${+SSH_CLIENT} )) || (( ${+SSH_TTY} )); then
    export SSH_SESSION=1
else
    export SSH_SESSION=0
fi
gpg-agent &>/dev/null
if [[ $? -ne 0 ]]; then
    gpg-agent --daemon --use-standard-socket &>/dev/null
fi
###############################################################################



###############################################################################
# Lines configured by zsh-newuser-install
###############################################################################
HISTFILE=~/.zsh_history
HISTSIZE=999999999
SAVEHIST=999999999
setopt appendhistory autocd beep nomatch notify hist_ignore_all_dups
unsetopt extendedglob
bindkey -v
###############################################################################



###############################################################################
# Lines configured by compinstall
###############################################################################
zstyle :compinstall filename "$HOME/.zshrc"
autoload -Uz compinit
compinit
###############################################################################



###############################################################################
# Basic settings
###############################################################################
KEYTIMEOUT=1                            # Timeout in ZLE mode
autoload -Uz compinit && compinit       # Autocomplete
zstyle ':completion:*' menu select
###############################################################################



###############################################################################
# Prompt
###############################################################################
# Colors
CYAN='%F{blue}%B'
GREEN='%F{green}%B'
RED='%F{red}%B'
ORANGE='%F{white}%B'
WHITE='%F{fg}%B'
GRAY='%F{fg}'
RES='%f%b'
autoload -Uz colors && colors
PROMPT="$WHITE%*$RES $RED%n$RES$GRAY@$RES$CYAN%m$RES \
$ORANGE%~ "$'\n'"       > $RES"

# Git and execution time
setopt prompt_subst
autoload -Uz vcs_info
zstyle ':vcs_info:*' stagedstr 'M'
zstyle ':vcs_info:*' unstagedstr 'M'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' formats "$WHITE [%f$GREEN%b%f$WHITE]%f \
$GREEN%c%f$ORANGE%u%f"
zstyle ':vcs_info:*' actionformats "$WHITE [%f$GREEN%b%f$WHITE|%f\
$RED%a%f$WHITE]%f"
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
zstyle ':vcs_info:*' enable git
+vi-git-untracked() {
    if [[ $("git" rev-parse --is-inside-work-tree 2>/dev/null) == \
        'true' ]] && [[ $("git" ls-files --other --directory \
        --exclude-standard | sed q | wc -l | tr -d ' ') == 1 ]] ; then
            hook_com[unstaged]+="$RED??%f"
    fi
}
GIT_INFO='${vcs_info_msg_0_}'
function preexec () {
    TIME=$(($(date +%s%N) / 1000000))
}
function precmd () {
    vcs_info
    if [ $TIME ]; then
        NOW=$(($(date +%s%N) / 1000000))
        ELAPSED=$(($NOW - $TIME))
        RPROMPT="$GIT_INFO $CYAN${ELAPSED}ms$RES"
        unset TIME
    fi
}
RPROMPT="$GIT_INFO"
###############################################################################



###############################################################################
# Keybindings (vim-like configuration)
###############################################################################
bindkey '^P'    up-history
bindkey '^N'    down-history
bindkey '^?'    backward-delete-char
bindkey '^h'    backward-delete-char
bindkey '^w'    backward-kill-word
bindkey '^f'    history-incremental-search-forward
bindkey '^r'    history-incremental-search-backward
bindkey '^[[3~' delete-char
bindkey '^[[H'  beginning-of-line
bindkey '^[[1~' beginning-of-line
bindkey '^[[F'  end-of-line
bindkey '^[[4~' end-of-line
###############################################################################



###############################################################################
# Aliases
###############################################################################
# Shell
alias cd..='cd ..'
alias ls='ls --color=auto'
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# SSH
if command -v 'checkssh' &>/dev/null; then
    alias git='checkssh; git'
    alias rsync='checkssh; rsync -aP'
    alias ssh='checkssh 1; ssh'
else
    alias rsync='rsync -aP'
fi

# Git
alias diffall='git diff --name-only main | xargs echo'
alias diffpy='git diff --name-only main | egrep "\.py$" | xargs echo'

# SLURM
alias scompute="salloc --x11 --partition=compute --nodes=1 --mem=0 \
--time=08:00:00"
alias sinter="salloc --x11 --partition=interactive --nodes=1 --mem=32G \
--time=12:00:00"
alias sq='squeue -u $USER -o "%.18i %.17j %.10P %.8u %.8a %.8T %.8M %.12l \
%.6D  %R"'
###############################################################################



###############################################################################
# Exports
###############################################################################
# UTF-8 support
UTF8='.UTF-8'
[[ $LANG =~ $UTF8 ]] || export LANG="$LANG$UTF8"

# GPG keys
export GPG_TTY=$(tty)

# Make sure that $HOME/bin is in $PATH
[[ ":$PATH:" =~ ":$HOME/bin:" ]] || export PATH="$HOME/bin:$PATH"
###############################################################################



###############################################################################
# Plugins
###############################################################################
# Load plugins
ZPLUGINS="$HOME/.zplugins"
source $ZPLUGINS/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $ZPLUGINS/zsh-autosuggestions/zsh-autosuggestions.zsh

# Plugin settings
bindkey '^ ' autosuggest-accept
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
ZSH_HIGHLIGHT_STYLES[default]="fg=fg,bold"
ZSH_HIGHLIGHT_STYLES[unknown-token]="fg=red,bold"
ZSH_HIGHLIGHT_STYLES[reserved-word]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[arg0]="fg=magenta,bold"
ZSH_HIGHLIGHT_STYLES[alias]="fg=green,bold"
ZSH_HIGHLIGHT_STYLES[suffix-alias]="fg=green,bold"
ZSH_HIGHLIGHT_STYLES[builtin]="fg=green,bold"
ZSH_HIGHLIGHT_STYLES[function]="fg=green"
ZSH_HIGHLIGHT_STYLES[command]="fg=green,bold"
ZSH_HIGHLIGHT_STYLES[precommand]="fg=green,bold,underline"
ZSH_HIGHLIGHT_STYLES[commandseparator]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[redirection]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[hashed-command]="fg=green,bold"
ZSH_HIGHLIGHT_STYLES[path]="fg=fg,bold,underline"
ZSH_HIGHLIGHT_STYLES[globbing]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[history-expansion]="fg=magenta,bold"
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]="fg=cyan,bold"
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]="fg=cyan,bold"
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]="fg=magenta,bold"
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]="fg=yellow"
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]="fg=cyan"
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]="fg=cyan"
ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]="fg=cyan"
ZSH_HIGHLIGHT_STYLES[rc-quote]="fg=cyan"
ZSH_HIGHLIGHT_STYLES[assign]="fg=cyan,bold"
###############################################################################



###############################################################################
# Lines configured by mamba init (slightly altered)
###############################################################################
# Find miniforge installation
if (( ${+WORK_DIR} )); then
    export MINIFORGE="$WORK_DIR/miniforge3"
else
    export MINIFORGE="$HOME/miniforge3"
fi

# Only run conda init script if this file is not initialized from a tmux
# session (this is necessary to keep an activated environment active when
# starting tmux)
if (( ! ${+TMUX} )); then
    __conda_setup=`$MINIFORGE/bin/conda shell.zsh hook 2> /dev/null`
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "$MINIFORGE/etc/profile.d/conda.sh" ]; then
            . "$MINIFORGE/etc/profile.d/conda.sh"
        else
            [[ ":$PATH:" =~ ":$MINIFORGE/bin:" ]] || \
                export PATH="$MINIFORGE/bin:$PATH"
        fi
    fi
    unset __conda_setup
    if [ -f "$MINIFORGE/etc/profile.d/mamba.sh" ]; then
        . "$MINIFORGE/etc/profile.d/mamba.sh"
    fi
fi
###############################################################################
