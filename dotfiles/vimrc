"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration file for VIM
" Copyright (c) 2022 Manuel Schlund <schlunma@gmail.com>
" Licensed under the GNU General Public License v3.0 (or later).
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Setup vim-plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let data_dir=has('nvim') ? stdpath('data').'/site' : '~/.vim'
let https='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
let cmd='!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs '.https
if empty(glob(data_dir.'/autoload/plug.vim'))
    silent execute cmd
    augroup PlugInstall
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    augroup END
endif

" Load plugins
call plug#begin()
Plug 'preservim/nerdtree'
Plug 'morhetz/gruvbox'
Plug 'preservim/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/indentpython.vim'
call plug#end()
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global basic settings (maybe overwritten in ftplugin)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on               " Smarter indentation based on filetype
syntax on                               " Enable syntax highlighting
let mapleader=' '                       " Set <leader> key to <space>
set nocompatible                        " Necesary for lots of cool vim things
set encoding=utf-8                      " Use utf-8 encoding
set shell=zsh                           " Support zsh shell
set expandtab                           " Tabs = spaces
set tabstop=4                           " Tab length = 4 spaces
set shiftwidth=4                        " Determines range of <<, >> and ==
set softtabstop=4                       " Tab = 4 spaces
set fileformat=unix                     " Use unix fileformat
set number                              " Show line numbers
set cursorline                          " Highlight current line
set cursorcolumn                        " Highlight current column
set hlsearch                            " Highlight search results
set splitbelow                          " Vertical split: below
set splitright                          " Horizontal split: right
set foldmethod=indent                   " Fold using indents
set foldnestmax=2                       " Nest at most 2 levels when folding
set foldlevel=2                         " Start with no folds
set background=dark                     " Use dark background
set omnifunc=syntaxcomplete#Complete    " Omnicomplete
set completeopt=longest,menuone         " Make completion menu more convenient
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
augroup OpenNERDTree
    autocmd!
    autocmd VimEnter * NERDTree
    autocmd VimEnter * wincmd l
augroup END
augroup QuitIfNERDTreeLastBuffer
    autocmd!
    autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') &&
        \ b:NERDTree.isTabTree()) | q | endif
augroup END

" Gruvbox
let g:gruvbox_contrast_dark='hard'

" NERDCommenter
let g:NERDDefaultAlign='left'
let g:NERDCustomDelimiters={
    \ 'fortran': {'left': '! '},
    \ 'ncl': {'left': '; '},
    \ 'vim': {'left': '" '},
    \ 'yaml': {'left': '# '}}

" SimpylFold
let g:SimpylFold_docstring_preview=1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Advanced settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto-format comments (add comment leader after <Enter>, not after <o>)
set formatoptions+=r
set formatoptions-=o

" Colorscheme
colorscheme gruvbox

" Other colors (9: bright red)
highlight ExtraWhitespace ctermbg=9
highlight Pmenu ctermbg=Black ctermfg=None
highlight PmenuSel ctermbg=Darkgrey ctermfg=None
highlight StatusLine ctermfg=Darkgrey

" Highlight ncl syntax
augroup HighlightNCL
    autocmd!
    autocmd BufRead,BufNewFile *.ncl set filetype=ncl
    autocmd! Syntax newlang source $VIM/ncl.vim
augroup END

" Highlighting yaml files is really slow with standard regexp engine
set regexpengine=1

" Highlight tabs and trailing whitespace
augroup HighlightTrailingWhitespace
    autocmd!
    autocmd VimEnter,WinEnter * match ExtraWhitespace /\s\+\%#\@<!$/
augroup END
set list
set listchars=tab:>-

" Highlight 80th column
if exists('+colorcolumn')
    set colorcolumn=80
else
    augroup HighlightColumn80
        autocmd!
        autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>79v.\+', -1)
    augroup END
endif

" Start/stop highlighting current cursor postition when entering/leaving pane
augroup HighlightCursorPositionOnEnter
    autocmd!
    autocmd WinLeave * set nocursorline nocursorcolumn
    autocmd WinEnter * set cursorline cursorcolumn
augroup END

" Statusbar
set laststatus=2
set statusline=
set statusline+=\ %n                                        " Buffer number
set statusline+=\ %y                                        " File type
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}  " Encoding
set statusline+=[%{&ff}]                                    " File format
set statusline+=\ %<%F                                      " Full path
set statusline+=%m                                          " Modified flag
set statusline+=%=                                          " Right aligned
set statusline+=\ %5l                                       " Current line
set statusline+=/%L                                         " Total lines
set statusline+=%4v                                         " Column number
set statusline+=\ 0x%04B                                    " Current character
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map <Esc> to <jk> or <kj>
inoremap jk <Esc>
inoremap kj <Esc>

" Move back (ö) an forth (ä)
nnoremap <char-246> <C-O>
nnoremap <char-228> <C-I>

" Easier split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-I> <C-W>1W

" Completion
inoremap <expr> <C-N> pumvisible() ? '<C-N>' :
  \ '<C-N><C-R>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <C-@> pumvisible() ? '<C-N>' :
  \ '<C-X><C-O><C-N><C-P><C-R>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Stop search highlighting
nnoremap <silent> , :nohlsearch<Bar>:echo<CR>

" Replace visual selection by <C-R>
vnoremap <C-R> "hy:%s/<C-R>h//gc<left><left><left>

" Remove trailing whitespace
nnoremap <silent> <leader>t :%s/\v\s+$//<CR>:nohlsearch<Bar>:echo<CR>

" Easy sort
vnoremap <silent> <leader>s :sort i<CR>
nnoremap <silent> <leader>p Vip:sort i<CR>

" Add license
nnoremap <silent> <leader>lg :read $HOME/.vim/templates/GPLv3.rst<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
