"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configuration file for VIM
" Copyright (c) 2021 Manuel Schlund <schlunma@gmail.com>
" Licensed under the GNU General Public License v3.0 (or later).
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let s:enable_ssh_features=!$SSH_SESSION
let s:enable_git=s:enable_ssh_features
let s:enable_syntastic=s:enable_ssh_features
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Minimal required vim version for complex features
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let s:required_vim_version=704
if v:version >= s:required_vim_version
    let s:vim_is_required_version=1
else
    let s:vim_is_required_version=0
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Setup Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if s:vim_is_required_version
    set nocompatible
    filetype off
    set rtp+=~/.vim/bundle/Vundle.vim

    " Load plugins
    call vundle#begin()
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'kien/ctrlp.vim'
    Plugin 'morhetz/gruvbox'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'tmhedberg/SimpylFold'
    Plugin 'vim-scripts/indentpython.vim'
    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'honza/vim-snippets'
    Plugin 'tpope/vim-surround'
    if s:enable_git
        Plugin 'tpope/vim-fugitive'
        Plugin 'Xuyuanp/nerdtree-git-plugin'
    endif
    if s:enable_syntastic
        Plugin 'vim-syntastic/syntastic'
    endif
    call vundle#end()
endif

" Additional plugins (not used at the moment)
" if has('python')
"     Plugin 'SirVer/ultisnips'
" endif
" if has('python3')
"     Plugin 'davidhalter/jedi-vim'
" endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global basic settings (maybe overwritten in ftplugin)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on               " Smarter indentation based on filetype
syntax on                               " Enable syntax highlighting
let mapleader=' '                       " Set <leader> key to <space>
set encoding=utf-8                      " Use utf-8 encoding
set shell=zsh                           " Support zsh shell
set expandtab                           " Tabs = spaces
set tabstop=4                           " Tab length = 4 spaces
set shiftwidth=4                        " Determines range of <<, >> and ==
set softtabstop=4                       " Tab = 4 spaces
set fileformat=unix                     " Use unix fileformat
set number                              " Show line numbers
set cursorline                          " Highlight current line
set hlsearch                            " Highlight search results
set splitbelow                          " Vertical split: below
set splitright                          " Horizontal split: right
set foldmethod=indent                   " Fold using indents
set foldnestmax=2                       " Nest at most 2 levels when folding
set foldlevel=2                         " Start with no folds
set background=dark                     " Use dark background
set omnifunc=syntaxcomplete#Complete    " Omnicomplete
set completeopt=longest,menuone         " Make completion menu more convenient
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if s:vim_is_required_version
    " NERDTree
    augroup OpenNERDTree
        autocmd!
        autocmd VimEnter * NERDTree
        autocmd VimEnter * wincmd l
    augroup END
    autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') &&
        \ b:NERDTree.isTabTree()) | q | endif

    " Syntastic
    if s:enable_syntastic
        autocmd VimEnter * silent! SyntasticToggleMode
        let g:syntastic_always_populate_loc_list=1
        let g:syntastic_auto_loc_list=1
    endif

    " Gruvbox
    let g:gruvbox_contrast_dark='hard'

    " NERDCommenter
    let g:NERDDefaultAlign='left'
    let g:NERDCustomDelimiters={
        \ 'ncl': {'left': '; '},
        \ 'vim': {'left': '" '},
        \ 'yaml': {'left': '# '}}

    " SimplyFold
    let g:SimpylFold_docstring_preview=1

    " Snippets (not used right now)
    " if has('python')
    "     let g:UltiSnipsExpandTrigger="<tab>"
    "     let g:UltiSnipsJumpForwardTrigger="<c-b>"
    "     let g:UltiSnipsJumpBackwardTrigger="<c-z>"
    " endif

    " Jedi-vim (not used right now)
    " if has('python3')
    "     let g:jedi#use_splits_not_buffers="right"
    "     let g:jedi#show_call_signatures="1"
    "     let g:jedi#popup_select_first=0
    " endif
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Advanced settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colorscheme
if s:vim_is_required_version
    colorscheme gruvbox
else
    colorscheme ron
endif

" Other colors (9: bright red)
highlight ExtraWhitespace ctermbg=9
highlight Pmenu ctermbg=Black ctermfg=None
highlight PmenuSel ctermbg=Darkgrey ctermfg=None
highlight StatusLine ctermfg=Darkgrey

" Highlight ncl syntax
autocmd BufRead,BufNewFile *.ncl set filetype=ncl
autocmd! Syntax newlang source $VIM/ncl.vim

" Highlighting yaml files is really slow with standard regexp engine
if s:vim_is_required_version
    set regexpengine=1
endif

" Highlight tabs and trailing whitespace
autocmd VimEnter,WinEnter * match ExtraWhitespace /\s\+\%#\@<!$/
set list
set listchars=tab:>-

" Highlight 80th column
if exists('+colorcolumn')
    set colorcolumn=80
else
    autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>79v.\+', -1)
endif

" Statusbar
set laststatus=2
set statusline=
set statusline+=\ %n                                        " Buffer number
set statusline+=\ %y                                        " File type
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}  " Encoding
set statusline+=[%{&ff}]                                    " File format
set statusline+=\ %<%F                                      " Full path
set statusline+=%m                                          " Modified flag
set statusline+=%=                                          " Right aligned
if s:vim_is_required_version && s:enable_git
    set statusline+=%{FugitiveStatusline()}                 " Git plugin
endif
set statusline+=\ %5l                                       " Current line
set statusline+=/%L                                         " Total lines
set statusline+=%4v                                         " Column number
set statusline+=\ 0x%04B                                    " Current character
if s:vim_is_required_version && s:enable_syntastic
    set statusline+=\ %#warningmsg#                         " Syntastic plugin
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map <Esc> key to jk or kj combination
inoremap jk <Esc>
inoremap kj <Esc>

" Easier split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-I> <C-W>1W

" Completion
inoremap <expr> <C-N> pumvisible() ? '<C-N>' :
  \ '<C-N><C-R>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <C-@> pumvisible() ? '<C-N>' :
  \ '<C-X><C-O><C-N><C-P><C-R>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Stop search highlighting
nnoremap <silent> , :nohlsearch<Bar>:echo<CR>

" Replace visual selection by <C-r>
vnoremap <C-R> "hy:%s/<C-R>h//gc<left><left><left>

" Remove trailing whitespace
nnoremap <silent> <leader>t :%s/\v\s+$//<CR>:nohlsearch<Bar>:echo<CR>

" Easy sort
vnoremap <silent> <leader>s :sort i<CR>
nnoremap <silent> <leader>p Vip:sort i<CR>

" Add license
nnoremap <leader>lg :read $HOME/.vim/templates/GPLv3.rst<CR>

" Start Syntastic check
if s:vim_is_required_version && s:enable_syntastic
    nnoremap <leader>s :w<CR>:SyntasticCheck<CR>
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
